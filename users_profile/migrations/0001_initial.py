# Generated by Django 5.2.7 on 2025-10-16 06:24

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SOSEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.JSONField(blank=True, help_text='Location where SOS was triggered (longitude, latitude)', null=True)),
                ('status', models.CharField(choices=[('triggered', 'Triggered'), ('sms_sent', 'SMS Sent'), ('police_called', 'Police Called'), ('geofence_alerted', 'Geofence Alerted'), ('resolved', 'Resolved')], default='triggered', help_text='Current status of the SOS event', max_length=20)),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the SOS event')),
                ('user', models.ForeignKey(help_text='User who triggered the SOS', on_delete=django.db.models.deletion.CASCADE, related_name='sos_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SOS Event',
                'verbose_name_plural': 'SOS Events',
                'db_table': 'users_sos_event',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community_id', models.CharField(help_text='Unique identifier for the community', max_length=100)),
                ('community_name', models.CharField(help_text='Name of the community', max_length=200)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(help_text='User who is a member of the community', on_delete=django.db.models.deletion.CASCADE, related_name='community_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Membership',
                'verbose_name_plural': 'Community Memberships',
                'db_table': 'users_community_membership',
                'unique_together': {('user', 'community_id')},
            },
        ),
        migrations.CreateModel(
            name='FamilyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Family contact's name", max_length=150)),
                ('phone', models.CharField(help_text="Family contact's phone number", max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('relationship', models.CharField(blank=True, help_text="Relationship to the user (e.g., 'Spouse', 'Parent', 'Sibling')", max_length=50)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary emergency contact')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who owns this family contact', on_delete=django.db.models.deletion.CASCADE, related_name='family_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Family Contact',
                'verbose_name_plural': 'Family Contacts',
                'db_table': 'users_family_contact',
                'unique_together': {('user', 'phone')},
            },
        ),
    ]
